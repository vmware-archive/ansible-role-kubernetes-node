# Copyright Â© 2015 VMware, Inc. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0 OR GPL-3.0-only
---
#### IPTABLES START ####
- name: Update iptables required ports
  template: 
    src: "templates/misc/kube_node-iptables.j2"
    dest: "{{ iptables_rules_script }}"
    owner: root
    group: root
    mode: 0744
  tags:
    - kube_node_installation

- name: Push iptables update
  shell: "{{ iptables_rules_script }}"
  tags:
    - kube_node_installation

- name: Restart iptables
  service: 
    name: iptables
    state: restarted
  tags:
    - kube_node_installation
#### IPTABLES START ####

#### CLEANUP START ####
# This cleans up any existing implementations and resets for flannel
- name: Remove docker0 bridge if it exists
  command: "{{ item }}"
  ignore_errors: true
  with_items:
    - /usr/sbin/ifconfig docker0 down
    - /usr/sbin/brctl delbr docker0
  tags:
    - kube_node_installation
#### CLEANUP END ####

#### FLANNEL START ####
- name: Install flannel
  yum: 
    name: "{{ flannel_pkg }}"
    state: present
  when: not install_flannel_from_src
  tags:
    - packages
    - kube_node_installation
    
- name: Download flannel binary from Github
  get_url:
    url: "{{ flannel_src_dl_url }}"
    dest: /usr/bin/flanneld
    owner: root
    group: root
    mode: 0755    
  when: install_flannel_from_src
  tags:
    - packages
    - kube_node_installation

- name: Install flannel service unit
  template:
    src: "templates/systemd/flannel.service.j2"
    dest: "{{ flannel_svc_unit }}"
    owner: root
    group: root
    mode: 0644
  tags:
    - kube_node_installation

- name: Reload flannel's systemd config
  command: systemctl daemon-reload
  tags:
    - kube_node_installation

- name: Start flannel service
  service: 
    name: flannel
    enabled: yes
    state: restarted
  tags:
    - kube_node_installation
#### FLANNEL END ####

#### DOCKER START ####
- name: Install docker
  yum:  
    name: "{{ docker_package }}"
    state: present
  tags:
    - packages
    - kube_node_installation

- name: Install docker service unit
  template:
    src: "templates/systemd/docker.service.j2"
    dest: "{{ docker_service_unit }}"
    owner: root
    group: root
    mode: 0644
  tags:
    - kube_node_installation

- name: Reload docker's systemd config
  command: systemctl daemon-reload
  tags:
    - kube_node_installation

- name: Start docker service
  service: 
    name: docker
    enabled: yes
    state: restarted
  tags:
    - kube_node_installation
#### DOCKER END ####

#### KUBERNETES MINION START ####
- name: Install kubernetes from package manager
  yum:  
    name: "{{ kube_pkg }}"
    state: present
  when: install_kube_from_src == "0"
  tags:
    - packages
    - kube_node_installation

- name: Check for existing Kubernetes installation archive
  stat:
    path: "{{ kube_src_local_parent_dir }}/{{ kube_src_local_parent_archive }}"
  when: install_kube_from_src == "1"
  register: kube_existing_src
  tags:
    - kube_node_installation

- name: Download the Kubernets binaries
  get_url:
    url: "{{ kube_src_dl_url }}"
    dest: "{{ kube_src_local_parent_dir }}/{{ kube_src_local_parent_archive }}"
    owner: "{{ ansible_ssh_user }}"
    group: "{{ ansible_ssh_user }}"
    mode: 0644
    tmp_dest: "{{ kube_src_local_parent_dir }}"    
  when: (install_kube_from_src == "1") and (not kube_existing_src.stat.exists)
  tags:
    - kube_node_installation
    
- name: Unarchive existing kubernetes parent binary
  unarchive:
    src: "{{ kube_src_local_parent_dir }}/{{ kube_src_local_parent_archive }}"
    dest: "{{ kube_src_local_parent_dir }}"
    owner: "{{ ansible_ssh_user }}"
    group:  "{{ ansible_ssh_user }}"
    copy: no
  when: install_kube_from_src == "1"
  tags:
    - kube_node_installation

- name: Unarchive individual kube service binaries
  unarchive:
    src: "{{ kube_src_local_child_dir }}/{{ kube_src_local_child_archive }}"
    dest: "{{ kube_src_local_child_dir }}"
    copy: no
  when: install_kube_from_src == "1"
  tags:
    - kube_node_installation
    
- name: Install kube minion binaries
  copy: 
    src: "{{ kube_src_local_bin_dir }}/{{ item }}"
    dest: "{{ kube_bin_local_dir }}/{{ item }}"
    owner: root
    group: root
    mode: 0755
    remote_src: True
  with_items:
    - kubelet
    - kube-proxy
    - kubectl
  when: install_kube_from_src == "1"
  tags:
    - kube_node_installation    

- name: Create kube group
  group:
    name: kube
    state: present
  when: install_kube_from_src == "1"
  tags:
    - kube_node_installation

- name: Create kube user
  user:
    name: kube
    createhome: no
    group: kube
    state: present
  when: install_kube_from_src == "1"
  tags:
    - kube_node_installation

- name: Create kube config and working directories
  file:
    path: "{{ item }}"
    state: directory
    mode: 0644
  when: install_kube_from_src == "1"
  with_items:
    - "{{ kube_cfg_dir }}"
    - "{{ kubelet_working_dir }}"
  tags:
    - kube_node_installation

- name: Create kubelet directories
  file:
    path: "{{ item }}"
    state: directory
    mode: 0644
  with_items:
    - "{{ kubelet_manifests_dir }}"
    - /root/.docker
  tags:
    - kube_node_installation

- name: Install kubelet and kube-proxy configs
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - { src: "templates/configs/config.j2", dest: "{{ kube_cfg_dir }}/config" }
    - { src: "templates/configs/kubelet.j2", dest: "{{ kube_cfg_dir }}/kubelet" }
    - { src: "templates/configs/fluentd.yaml.j2", dest: "{{ kubelet_manifests_dir }}/fluentd.yaml" }
  tags:
    - kube_node_installation

- name: Install the kube-proxy systemd service
  template:
    src: "templates/systemd/{{ item.name }}.service.j2"
    dest: "{{ item.svc }}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - { name: "kube-proxy", svc: "/etc/systemd/system/kube-proxy.service" }
  when: install_kube_from_src == "1"
  tags:
    - kube_node_installation

- name: Install the kubelet systemd service
  template:
    src: "templates/systemd/{{ item.name }}.service.j2"
    dest: "{{ item.svc }}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - { name: "kubelet", svc: "/etc/systemd/system/kubelet.service" }  
  tags:
    - kube_node_installation

- name: Enable support for image pull from Docker hub
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - { src: templates/configs/docker_config.json, dest: /root/.docker/config.json }
  tags:
    - kube_node_installation

- name: Start kube-proxy and kubelet
  service: 
    name: "{{ item }}"
    enabled: yes
    state: restarted
  with_items:
    - kube-proxy
    - kubelet
  tags:
    - kube_node_installation

# kubelet sometimes fails after startup, not sure why. Sleep for 5
# and then start kubelet again
- name: Sleep 5 seconds
  pause: seconds=5
  tags:
    - kube_node_installation
    
- name: Start kubelet
  service: 
    name: kubelet 
    enabled: yes
    state: started
  tags:
    - kube_node_installation
#### KUBERNETES MINION END ####
